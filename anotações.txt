React

* É uma biblioteca, não um framework
* Biblioteca para manipulação de interfaces na web
* Rendering Patterns
	* SSR (tradicional)
		* Primeiro que surgiu onde temos server-side rendering
		* A cada requisição do usuário, o servidor (com front e back juntos lá)
		  vai processar, gerar todo o html, css e lógica de banco e entregar a 
		  página para o usuário
			* Enquanto não processa requisição, tela fica branca
	* SPA
		* A cada requisição o servidor back end só retorna informações em .json
		  não fica mais com as lógicas de front-end
		* Aí outra aplicação, a front-end, obtem os dados em json e converte para 
		  css e html e js
		* Podemos ter várias apps front-end para cada tipo de interface, por exemplo
		* Múltiplos front-end consumindo dados da mesma aplicação back-end

Compilers e Bundlers

* Compilers são os que transformam codigos de uma versao js para outra que rode no seu servidor
* Bundlers: webpack	
	* pega vários arquivos e junta em um só para mandar para o navegador processar
* ES Modules: forma que navegadores possuem para exportar e importar arquivos;
* Agora navegadores usam esses es modules para fazer essa importação de arquivos de forma nativa
	* VITE é uma solução que se aproveita disso, ou seja, faz o mesmo que o webpack mas sem precisar
	  de bundlering;
	  	* Ele tem compiler interno também, sem precisar de um separado (tipo o babel)

PRÁTICA

* npm create vite@latest : cria um projeto vite para você configurar e usar
* npm install : apos entrar na pasta do projeto vite execute isso para instalar dependencia
* npm run dev : roda a aplicação recem criada, uma previa
* limpeza: tira os arquivos .css e elimina as referencias a eles; tira todos os svg e as referencias a eles no código; limpa dentro do return do app.jsx

COMPONENTES

* Deslocar, um pedaço da interface que pode ser repetida varias vezes com info. diferentes se necessário
* componente: fnunção que retorna html
* todos os componentes = jsx = javascript + xml

PROPRIEDADES

* Propriedades são informações que passamos para os componentes
* É o que pode diferenciar conteudo de um componente em relação ao outro

CSS Modules

* css modular para afetar apenas componentes em especifico;
* cada classe usada gera um hash único de identificação;

SOBRE ESTRUTURA DE PASTAS

* Não estruture tudo antes de codar

COMO IDENTIFICAR COMPONENTES:

* Se repete muito em tela com mesma estilização ou quase a mesma, com mesmo comportamento, etc;
* Se você tem um componente maior e pode tirar um componente menor sem fazer o maior perder funcionalidade dele;

COMO VOCÊ CONECTA DADOS DO BACK COM A INTERFACE USANDO COMPONENTES

* O componente que é iterado vai ser iterado com propriedades deles recebendo valores do vetor retornando pelo backend;
* Aí basicamente o trabalho é você garantir que esse compoenente iterado tenha, dentro dele, essas propriedades invocadas
nos lugares corretos (se for imagem, estar no fundo ou na formatação do perfil, se for texto, estar em uma div de conteudo...)

USER STATE

* submit = evento que pode vir do clique, um enter, etc...
* Sempre que a gente quer monitorar os valores e mudanças de valores de uma variavel (como um vetor), nós usamos useState no React
* sempre nós usamos destructuring.
	* const [comentario, funcaoAlteraComentario()] = useState(valoresIniciasDaSuaVariavel)
* Com isso, a funcaoAlteraComentario() vai alterar o vetor e ao mesmo tempo avisar para o react que ele precisa re-renderizar a tela;
* Você tem que passar o novo conjunto de valores que vai ficar apos a operação
	* Ex: vetor tava clientes = ['legal', 'muito bom', 'produto fantastico']
	* Adicionei comentário 'produto muito bom';
	* uso funcaoAlteraComentario(['legal', 'muito bom', 'produto fantastico', 'produto muito bom']) ==> imutabilidade

TIPOS DE PROGRAMAÇÃO DE COMPUTADORES

* Imperativa: falo passo a passo o que deve ser feito;
* Declarativa: eu declaro, exponho o resultado que eu quero;
	* Passo as condições para ter o resultado final;
		
